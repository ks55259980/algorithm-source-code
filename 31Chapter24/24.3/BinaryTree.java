package TreePackage;import java.util.Iterator;import java.util.EmptyStackException;import java.util.NoSuchElementException;import StackAndQueuePackage.*;/**   A class that implements the ADT binary tree.      @author Frank M. Carrano   @author Timothy M. Henry   @version 4.0*/public class BinaryTree<T> implements BinaryTreeInterface<T>{   private BinaryNode<T> root;   public BinaryTree()   {      root = null;   } // end default constructor   public BinaryTree(T rootData)   {      root = new BinaryNode<>(rootData);   } // end constructor   public BinaryTree(T rootData, BinaryTree<T> leftTree,                                  BinaryTree<T> rightTree)   {      privateSetTree(rootData, leftTree, rightTree);   } // end constructor   public void setTree(T rootData)   {      root = new BinaryNode<>(rootData);   } // end setTree   public void setTree(T rootData, BinaryTreeInterface<T> leftTree,                                   BinaryTreeInterface<T> rightTree)   {      privateSetTree(rootData, (BinaryTree<T>)leftTree,                                (BinaryTree<T>)rightTree);   } // end setTree	private void privateSetTree(T rootData, BinaryTree<T> leftTree, 	                                        BinaryTree<T> rightTree)	{      // < FIRST DRAFT - See Segments 24.4 - 24.7 for improvements. >      root = new BinaryNode<T>(rootData);            if (leftTree != null)         root.setLeftChild(leftTree.root);            if (rightTree != null)         root.setRightChild(rightTree.root);	} // end privateSetTree/*  < Implementations of getRootData, getHeight, getNumberOfNodes, isEmpty, clear,      and the methods specified in TreeIteratorInterface are here. >   . . . */} // end BinaryTree