import java.util.Arrays;/**   A class that implements the ADT maxheap by using an array.    @author Frank M. Carrano   @author Timothy M. Henry   @version 4.0*/public final class MaxHeap<T extends Comparable<? super T>>             implements MaxHeapInterface<T>{   private T[] heap;      // Array of heap entries; ignore heap[0]   private int lastIndex; // Index of last entry and number of entries   private boolean initialized = false;	private static final int DEFAULT_CAPACITY = 25;	private static final int MAX_CAPACITY = 10000;      public MaxHeap()   {      this(DEFAULT_CAPACITY); // Call next constructor   } // end default constructor      public MaxHeap(int initialCapacity)   {      // Is initialCapacity too small?      if (initialCapacity < DEFAULT_CAPACITY)         initialCapacity = DEFAULT_CAPACITY;      else // Is initialCapacity too big?         checkCapacity(initialCapacity);            // The cast is safe because the new array contains null entries      @SuppressWarnings("unchecked")      T[] tempHeap = (T[])new Comparable[initialCapacity + 1];      heap = tempHeap;      lastIndex = 0;      initialized = true;   } // end constructor   public void add(T newEntry)   {   // < See Segment 26.8. >   } // end add   public T removeMax()   {   // < See Segment 26.12. >   } // end removeMax   public T getMax()   {		checkInitialization();      T root = null;      if (!isEmpty())         root = heap[1];      return root;   } // end getMax   public boolean isEmpty()   {      return lastIndex < 1;   } // end isEmpty   public int getSize()   {      return lastIndex;   } // end getSize   public void clear()   {		checkInitialization();      while (lastIndex > -1)      {         heap[lastIndex] = null;         lastIndex--;      } // end while      lastIndex = 0;   } // end clear   // < Private methods >} // end MaxHeap